name: Node.js CI

on:
  push:
    branches:
      - "**"
    tags:
      - "**"

jobs:
  define_docker_tags_names:
    name: Define Docker tags' names
    runs-on: ubuntu-latest
    outputs:
      docker_image_path: ${{ steps.tags_names.outputs.docker_image_path }}
      docker_image_tag_base: ${{ steps.tags_names.outputs.docker_image_tag_base }}
      docker_image_tag_candidate: ${{ steps.tags_names.outputs.docker_image_tag_candidate }}
      docker_image_tag_release: ${{ steps.tags_names.outputs.docker_image_tag_release }}
    steps:
      - id: tags_names
        name: Define Docker tags names
        run: |
          ### IMAGE PATH
          IMAGE_PATH=ghcr.io/${{ github.repository }}
          # Change all uppercase to lowercase
          IMAGE_PATH=$(echo $IMAGE_PATH | tr '[A-Z]' '[a-z]')

          ### VERSION
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          ### Set env vars
          DOCKER_IMAGE_PATH=$IMAGE_PATH
          DOCKER_IMAGE_TAG_BASE=$VERSION-build-base
          DOCKER_IMAGE_TAG_CANDIDATE=$VERSION-candidate
          DOCKER_IMAGE_TAG_RELEASE=$VERSION

          ### Echo Docker tags' names
          echo "Docker base build => $DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_BASE"
          echo "Docker candidate (e2e) => $DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_CANDIDATE"
          echo "Docker release => $DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_RELEASE"

          ### Set job output
          echo "::set-output name=docker_image_path::${DOCKER_IMAGE_PATH}"
          echo "::set-output name=docker_image_tag_base::${DOCKER_IMAGE_TAG_BASE}"
          echo "::set-output name=docker_image_tag_candidate::${DOCKER_IMAGE_TAG_CANDIDATE}"
          echo "::set-output name=docker_image_tag_release::${DOCKER_IMAGE_TAG_RELEASE}"

  build_base:
    name: Build & push Docker base image
    needs: ["define_docker_tags_names"]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - id: login
        name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: build_base
        name: Build & push base image
        run: |
          DOCKER_IMAGE_PATH=${{ needs.define_docker_tags_names.outputs.docker_image_path }}
          DOCKER_IMAGE_TAG_BASE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_base }}

          DOCKER_IMAGE_BASE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_BASE

          docker pull $DOCKER_IMAGE_BASE || true

          if docker inspect $DOCKER_IMAGE_BASE > /dev/null 2>&1; then
            echo "Base image already exists, using it as cache"

            docker build . --cache-from $DOCKER_IMAGE_BASE --tag $DOCKER_IMAGE_BASE --target dev

          else
            echo "Base image doesn't exist, checking if latest-build-base exist"
            DOCKER_IMAGE_LATEST_BASE=$DOCKER_IMAGE_PATH:latest-build-base

            docker pull $DOCKER_IMAGE_LATEST_BASE || true

            if docker inspect $DOCKER_IMAGE_LATEST_BASE > /dev/null 2>&1; then
              echo "Latest-build-base exist, using it as cache"

              docker build . --cache-from $DOCKER_IMAGE_LATEST_BASE --tag $DOCKER_IMAGE_BASE --target dev

            else
              echo "No base image existing (both current and latest), building from scratch..."

              docker build . --tag $DOCKER_IMAGE_BASE --target dev
            fi
          fi

          docker push $DOCKER_IMAGE_BASE

  run_lint:
    name: Run lint
    needs: ["define_docker_tags_names", "build_base"]
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - id: install_packages
        name: Install packages
        run: |
          npm ci
      - name: Trunk Check
        uses: trunk-io/trunk-action@v1
        with:
          check-mode: all
          arguments: --github-annotate-new-only=false

  run_unit_tests:
    name: Run unit tests on Docker base image
    needs: ["define_docker_tags_names", "build_base"]
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - id: login
        name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: run_unit_tests
        name: Run unit tests on Docker base image
        run: |
          DOCKER_IMAGE_PATH=${{ needs.define_docker_tags_names.outputs.docker_image_path }}
          DOCKER_IMAGE_TAG_BASE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_base }}

          DOCKER_IMAGE_BASE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_BASE

          docker pull $DOCKER_IMAGE_BASE
          docker run --rm $DOCKER_IMAGE_BASE npm run test

  build_candidate:
    name: Build & push Docker candidate image
    needs: ["define_docker_tags_names", "build_base", "run_lint", "run_unit_tests"]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - id: login
        name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: build_candidate
        name: Build & push candidate image
        run: |
          DOCKER_IMAGE_PATH=${{ needs.define_docker_tags_names.outputs.docker_image_path }}
          DOCKER_IMAGE_TAG_BASE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_base }}
          DOCKER_IMAGE_TAG_CANDIDATE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_candidate }}

          DOCKER_IMAGE_BASE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_BASE
          DOCKER_IMAGE_CANDIDATE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_CANDIDATE

          docker pull $DOCKER_IMAGE_BASE
          docker build . --cache-from $DOCKER_IMAGE_BASE --tag $DOCKER_IMAGE_CANDIDATE
          docker push $DOCKER_IMAGE_CANDIDATE

  run_e2e:
    name: Run e2e tests on candidate image
    needs: ["define_docker_tags_names", "build_candidate"]
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: read
    steps:
      - id: checkout
        uses: actions/checkout@v2
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run e2e
        run: |
          DOCKER_IMAGE_PATH=${{ needs.define_docker_tags_names.outputs.docker_image_path }}
          DOCKER_IMAGE_TAG_BASE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_base }}
          DOCKER_IMAGE_TAG_CANDIDATE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_candidate }}

          DOCKER_IMAGE_BASE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_BASE
          DOCKER_IMAGE_CANDIDATE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_CANDIDATE

          docker pull $DOCKER_IMAGE_BASE
          docker pull $DOCKER_IMAGE_CANDIDATE
          DOCKER_IMAGE=$DOCKER_IMAGE_CANDIDATE DOCKER_BUILD_IMAGE=$DOCKER_IMAGE_BASE ./__tests__/e2e/start_e2e.sh

  tag_release:
    name: Tag & push Docker release image
    if: ${{ github.ref == 'refs/heads/main' || contains(github.ref, 'ref/head/v*') }}
    needs: ["define_docker_tags_names", "run_e2e"]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      docker_image_tag: ${{ steps.tag_release.outputs.docker_image_tag }}
      docker_image_remote_digest: ${{ steps.tag_release.outputs.docker_image_remote_digest }}
    steps:
      - id: login
        name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: tag_release
        name: Tag & push release image
        run: |
          DOCKER_IMAGE_PATH=${{ needs.define_docker_tags_names.outputs.docker_image_path }}
          DOCKER_IMAGE_TAG_CANDIDATE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_candidate }}
          DOCKER_IMAGE_TAG_RELEASE=${{ needs.define_docker_tags_names.outputs.docker_image_tag_release }}

          DOCKER_IMAGE_CANDIDATE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_CANDIDATE
          DOCKER_IMAGE_RELEASE=$DOCKER_IMAGE_PATH:$DOCKER_IMAGE_TAG_RELEASE

          docker pull $DOCKER_IMAGE_CANDIDATE
          docker tag $DOCKER_IMAGE_CANDIDATE $DOCKER_IMAGE_RELEASE
          docker push $DOCKER_IMAGE_RELEASE

          DOCKER_IMAGE_REMOTE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $DOCKER_IMAGE_RELEASE)
          echo DOCKER_IMAGE_REMOTE_DIGEST=$DOCKER_IMAGE_REMOTE_DIGEST

          arrIN=(${DOCKER_IMAGE_RELEASE//:/ })
          VERSION=${arrIN[1]}

          echo "::set-output name=docker_image_tag::${VERSION}"
          echo "::set-output name=docker_image_remote_digest::${DOCKER_IMAGE_REMOTE_DIGEST}"

  deploy_release:
    name: Deploy Docker release image
    if: ${{ github.ref == 'refs/heads/main' || contains(github.ref, 'ref/head/v*') }}
    needs: ["define_docker_tags_names", "tag_release"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: deploy_release
        name: Deploy release
        run: |
          DOCKER_IMAGE_TAG_RELEASE_REMOTE_DIGEST=${{ needs.tag_release.outputs.docker_image_remote_digest }}
          HEROKU_DOCKER_IMAGE=registry.heroku.com/soryo-fastify-todo/web

          docker pull $DOCKER_IMAGE_TAG_RELEASE_REMOTE_DIGEST

          echo "Tagging Docker release image for Heroku"
          docker tag $DOCKER_IMAGE_TAG_RELEASE_REMOTE_DIGEST $HEROKU_DOCKER_IMAGE

          echo "Login to Heroku registry"
          docker login --username=_ --password=${{secrets.HEROKU_API_KEY}} registry.heroku.com

          echo "Pushing image to Heroku registry"
          docker push $HEROKU_DOCKER_IMAGE
          HEROKU_IMAGE_ID=$(docker inspect $HEROKU_DOCKER_IMAGE --format={{.Id}})

          echo "Triggering release in Heroku"
          payload='{"updates":[{"type":"web","docker_image":"'"$HEROKU_IMAGE_ID"'"}]}'
          curl -n -X PATCH https://api.heroku.com/apps/soryo-fastify-todo/formation \
          -d "$payload" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.heroku+json; version=3.docker-releases" \
          -H "Authorization: Bearer ${{secrets.HEROKU_API_KEY}}"
